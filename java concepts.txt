Object Oriented Programming Language
---------------------------------------------------------
1)Class :- A class is known as object framework.
A class contains variables and methods.
2)Object is a reference pointer to the class.
we can access the variables and methods of a class using object.
-------------------------------------------------------------------------------------
3)Inheritance (is-a)relationship
(parent class/base class/super class)--------------------(child class,sub class,derived class)
It is a mechanism in which one object acquires all the properties and behaviour of a parent class.
It has parent class relationship which is known as is-a relationship.
It is a tight coupling.The child class depend upon the parent class.It is reusability of a parent class.
we use the key word super to access the super class methods and variables.
we use the keyword extends to access the parent class into the child class.
example:- we have iphone 6,7,8,9,10...14
all features of iphone 6 is present in iphone 7 plus we have some added features.we are not writing the code from the begining.
we are reusing the exsisting 6 features.

The child class depend upon the parent class.
If the parent class fails to start or have any error than the child class will also fail to start.because child class is totally dependend on the parent class.




----------------------------------------------------------------------------------------------------------
4)Aggregation(has-a)relationship
-----------------------------------------------------------
It is a has-a relationship.
example :- 
employee has a address
employee has a salary
house has a kitchen
Here also we have code reusability.here it is loosely coupled.
In this we will call a class with in another class.
Spring it support has-a relationship.
code reuse is best achieved by aggrgation then the inheritance(is-a) relationship.
----------------------------------------------------------------------------------------------------------------------------------------------
advantage of Aggregation
-----------------------------------------
1)Code Reusability:- we can use the existing classes as part of main class .This promote reuse in object-oriented programming.
2)Modularity:- Aggrigation promotes a modular design,allow us to break down complex system into smaller ,manageable parts.
.each part can be developed and tested independently.
3)encapsulation:- aggregation allows you to encapsulate the dehaviour and data of the part class within the whole class.This means that the part class are hidden from the outside world,which enhances data security and maintainabillty.
4)Improve Testing  facility.
5)reduce complexity.
6)scalability :- aggregation allows us to add or remove parts as needed.
7)Better Collaboration:- Developers can work on different parts of the system independently.
8)Has-A relationship is also called aggregation and composition.
9)is-a relationship is a specialization and generalization relationship.
10)assosiation is a aggregation that represents a "whole-part" relationship between classes.
---------------------------------------------------------------------------------------------------------------
example:-

create a connection class
we call it inside our main class.

@Autowire
JDBCConnection jdbc;

--->username/password is incorrect.
Then also the main class will execute other statements.

---------------------------------------------------------------------------------------------------------------------------------------------
example-1
--------------------
package org.sandip;

public class Address
{
	int streettno;
String city,state,loc;
public Address(int streettno, String city, String state, String loc) {
	super();
	this.streettno = streettno;
	this.city = city;
	this.state = state;
	this.loc = loc;
}
@Override
public String toString() {
	return "Address [streettno=" + streettno + ", city=" + city + ", state=" + state + ", loc=" + loc + "]";
}


}
----------------------------------------------------------------------------------------
package org.sandip;

public class Employee
{
int empno;
String name,dept;
Address add;
public Employee(int empno, String name, String dept, Address add) {
	super();
	this.empno = empno;
	this.name = name;
	this.dept = dept;
	this.add = add;
}
@Override
public String toString() {
	return "Employee [empno=" + empno + ", name=" + name + ", dept=" + dept + ", add=" + add + "]";
}
public void display()
{
	System.out.println("the empno is "+empno);
	System.out.println("the name is "+name);
	System.out.println("the dept is "+dept);
	System.out.println("the address is "+add);
	
}

}
--------------------------------------------------------------------------------------------------------
package org.sandip;

public class Mainclass 
{
public static void main(String[] args)
{
Address ob=new Address(10,"Bangalore","Karnataka","near airport");
Employee ob1=new Employee(101,"sandip","sales",ob);
ob1.display();
}
}
------------------------------------------------------------------------------------------------------------------
wap to create a Bank class (accno,branch,balance,customer)
customer class (custid,name,address)
-------------------------------------------------------------------------------------------------
inheritance
----------------------


-----------------------------------
Exception Handling
-------------------------------
why we are going for exception handling
--------------------------------------------------------
There are three types of error
1)compile time error(missing of semi-colon,spelling mistake,...)
2)run time error(divide by zero error,data type mismatch,crossing the array limit,...)
3)logical error

we use exception handling for runtime error mostly .so that if the enduser enter wrong input the program should not terminate it should give proper error message and continue till the end of the program.   

There are three types of exception
1)Checked Exception :- sql exception,IOException,Interrupted exception .This we have to handle then only it will allow to execute the program. 
2)Unchecked Exception:-Arithmatic exception,Null pointer,arrayindex outof bound....
3)Error:- harddisk failure,memory stack overflow.
-----------------------
we have five keywords
1)try,2)catch,3)finally,4)throw 5)throws
-------------------------------------------------------------
throw is used for user defined exception.
example:- marks should be greater than zero.
salary show be greater than 18000.
---------------------------------------------------------
throws exception is mainly used for checked exception.It doesn't have any body.It is written with main method or any method.
------------------------------------------------------------------------------------------
example-1
-------------------
//checked exception unit you handle the error it will not allow to execute.
package org.sandip;
public class Test1 extends Thread
{
public static void main(String[] args) throws Exception 
{
	for(int i=1;i<=10;i++)
		{
			System.out.println(i);
			Thread.sleep(1000);
			}
	}	
}
----------------------------------------------------------------------------------
example-2
----------------------
//checked exception unit you handle the error it will not allow to execute.
package org.sandip;
public class Test1 extends Thread
{
public static void main(String[] args)  
{
	for(int i=1;i<=10;i++)
		{
			System.out.println(i);
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
			System.out.println("Interrupted Exception");
			}
			}
	}	
}
------------------------------------------------------------------
inheritance
----------------------
package org.sandip;
import java.util.*;
public class Student 
{
int rollno;
String name,address;
void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name,address");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
}
void display()
{
	System.out.println("the rollno is"+rollno+"the name is "+name+"the address is "+address);
}
}
------------------------------------------------------------
package org.sandip;
import java.util.*;
public class Marks extends Student
{
int phy,chem,math,total,avg;
String grade;
void input()
{
	super.input();
	Scanner ob=new Scanner(System.in);
	System.out.println("enter phy,chem,math marks");
	phy=ob.nextInt();
	chem=ob.nextInt();
	math=ob.nextInt();
	total=phy+chem+math;
	avg=total/3;
	if(avg>70)
		grade="First Grade";
	else if(avg>60)
		grade="Second Grade";
	else if(avg>50)
		grade="Third Grade";
	else
		grade="Fail";
}
void display()
{
	super.display();
	System.out.println("the total is "+total);
	System.out.println("the average is "+avg);
	System.out.println("The grade is "+grade);
}
public static void main(String[] args)
{
	Marks ob=new Marks();  //child class
	ob.input();
	ob.display();
}
}
---------------------------------------------------------------------------------------
wap to create a customer class(name,address,phoneno)
create class called shopping extending the customer class
shopping class(product id,product name,price)

and display the details
------------------------------------------------------------------------




















